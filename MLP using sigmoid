{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "16bea509",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:21:34.249708Z",
     "iopub.status.busy": "2024-08-22T14:21:34.249224Z",
     "iopub.status.idle": "2024-08-22T14:21:34.274615Z",
     "shell.execute_reply": "2024-08-22T14:21:34.272900Z"
    },
    "papermill": {
     "duration": 0.032648,
     "end_time": "2024-08-22T14:21:34.277512",
     "exception": false,
     "start_time": "2024-08-22T14:21:34.244864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The network input is: [0.04305145 0.76561865 0.34785126]\n",
      "The network output is: [1.05302777 1.14806091]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "\n",
    "class MLP:\n",
    "    def __init__(self, num_inputs=3, num_hidden=[3,5], num_outputs=2):\n",
    "        self.num_inputs = num_inputs \n",
    "        self.num_hidden = num_hidden\n",
    "        self.num_outputs = num_outputs\n",
    "    \n",
    "        layers = [self.num_inputs] + self.num_hidden + [self.num_outputs]\n",
    "        \n",
    "        self.weights = []\n",
    "        for i in range(len(layers)-1):\n",
    "            w=np.random.rand(layers[i],layers[i+1])\n",
    "            self.weights.append(w)\n",
    "            \n",
    "    def forward_propagate(self,inputs):\n",
    "        activations = inputs\n",
    "        \n",
    "        for w in self.weights:\n",
    "            net_inputs = np.dot(activations,w)\n",
    "            activations = self._sigmoid(net_inputs)\n",
    "            \n",
    "        return activations\n",
    "    \n",
    "    def _sigmoid(self,x):\n",
    "        return 1/1+np.exp(-x)\n",
    "    \n",
    "if __name__ == \"__main__\":\n",
    "    mlp = MLP()\n",
    "    inputs = np.random.rand(mlp.num_inputs)\n",
    "    outputs = mlp.forward_propagate(inputs)\n",
    "    \n",
    "    print(\"The network input is: {}\".format(inputs))\n",
    "    print(\"The network output is: {}\".format(outputs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9ab923a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:21:34.285835Z",
     "iopub.status.busy": "2024-08-22T14:21:34.284807Z",
     "iopub.status.idle": "2024-08-22T14:21:34.298145Z",
     "shell.execute_reply": "2024-08-22T14:21:34.296908Z"
    },
    "papermill": {
     "duration": 0.02063,
     "end_time": "2024-08-22T14:21:34.301439",
     "exception": false,
     "start_time": "2024-08-22T14:21:34.280809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The network input is: [0.92381262 0.89901492 0.30213225]\n",
      "The network output is: [0.82433805 0.7959502 ]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "\n",
    "\n",
    "class MLP:\n",
    "    \n",
    "    def __init__(self,num_inputs=3,num_hidden=[3,5],num_outputs=2):\n",
    "        self.num_inputs = num_inputs\n",
    "        self.num_hidden = num_hidden\n",
    "        self.num_outputs = num_outputs\n",
    "        \n",
    "        layers = [self.num_inputs] + self.num_hidden + [self.num_outputs]\n",
    "        \n",
    "        self.weights = []\n",
    "        for i in range(len(layers)-1):\n",
    "            w = np.random.rand(layers[i],layers[i+1])\n",
    "            self.weights.append(w)\n",
    "            \n",
    "        \n",
    "    def forward_propagate(self,inputs):\n",
    "        activations = inputs\n",
    "        \n",
    "        for w in self.weights:\n",
    "            net_inputs=np.dot(activations,w)\n",
    "            activations=self._sigmoid(net_inputs)\n",
    "            \n",
    "        return activations\n",
    "    \n",
    "    def _sigmoid(self,x):\n",
    "        return 1/(1+(np.exp(-x)))\n",
    "    \n",
    "    \n",
    "if __name__ == \"__main__\":\n",
    "    \n",
    "    mlp=MLP()\n",
    "    \n",
    "    inputs = np.random.rand(mlp.num_inputs)\n",
    "    outputs = mlp.forward_propagate(inputs)\n",
    "    \n",
    "    print(\"The network input is: {}\".format(inputs))\n",
    "    print(\"The network output is: {}\".format(outputs))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4.306335,
   "end_time": "2024-08-22T14:21:34.725965",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-22T14:21:30.419630",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
